# 러닝크루 프로젝트 코딩 표준

## TypeScript/React 코딩 규칙

### 1. 컴포넌트 작성 규칙
- **함수형 컴포넌트**: 모든 컴포넌트는 함수형 컴포넌트로 작성
- **타입 정의**: Props 인터페이스를 명시적으로 정의
- **네이밍**: 컴포넌트명은 PascalCase, 파일명은 kebab-case

```typescript
interface HeroSectionProps {
  title: string;
  subtitle?: string;
  ctaText: string;
}

export default function HeroSection({ title, subtitle, ctaText }: HeroSectionProps) {
  return (
    <section className="hero-section">
      {/* 컴포넌트 내용 */}
    </section>
  );
}
```

### 2. Tailwind CSS 사용 규칙
- **클래스 순서**: 레이아웃 → 스타일링 → 반응형 → 상태 순서로 정렬
- **커스텀 클래스**: 자주 사용되는 조합은 `@apply` 디렉티브로 추출
- **반응형**: 모바일 퍼스트 접근법 사용

```tsx
// 좋은 예
<div className="flex flex-col items-center justify-center p-4 md:p-8 lg:p-12 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-300">

// 나쁜 예
<div className="bg-gradient-to-r from-blue-500 to-purple-600 flex flex-col items-center justify-center p-4 hover:from-blue-600 hover:to-purple-700 transition-all duration-300 md:p-8 lg:p-12">
```

### 3. Next.js App Router 규칙
- **페이지 컴포넌트**: `page.tsx` 파일에서 default export 사용
- **레이아웃**: `layout.tsx`에서 공통 레이아웃 정의
- **메타데이터**: `metadata` 객체를 사용하여 SEO 최적화

### 4. 이미지 최적화
- **Next.js Image**: 모든 이미지는 `next/image`의 `Image` 컴포넌트 사용
- **성능**: `priority` 속성을 중요한 이미지에 적용
- **접근성**: `alt` 속성은 항상 의미있게 작성

```tsx
import Image from 'next/image';

<Image
  src="/hero-image.jpg"
  alt="러닝크루 멤버들이 함께 달리는 모습"
  width={800}
  height={600}
  priority
  className="rounded-lg shadow-lg"
/>
```

### 5. 상태 관리
- **로컬 상태**: `useState` 사용
- **복잡한 상태**: `useReducer` 고려
- **전역 상태**: 필요시 Context API 또는 상태 관리 라이브러리 사용

### 6. 에러 처리
- **타입 가드**: 런타임 타입 체크 구현
- **에러 바운더리**: 주요 컴포넌트에 에러 바운더리 적용
- **사용자 친화적**: 사용자에게 명확한 에러 메시지 제공

description:
globs:
alwaysApply: false
---
