# 러닝크루 랜딩페이지 성능 최적화 가이드

## Next.js 성능 최적화

### 1. 이미지 최적화
- **Next.js Image 컴포넌트**: 모든 이미지에 `next/image` 사용
- **적절한 크기**: 실제 사용 크기에 맞는 이미지 제공
- **포맷 최적화**: WebP, AVIF 포맷 우선 사용
- **Lazy Loading**: 화면에 보이지 않는 이미지는 자동 lazy loading

```tsx
import Image from 'next/image';

// 좋은 예
<Image
  src="/hero-running.jpg"
  alt="러닝크루 멤버들이 함께 달리는 모습"
  width={1200}
  height={800}
  priority // 첫 화면 이미지는 priority 적용
  className="object-cover"
  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
/>

// 나쁜 예
<img src="/hero-running.jpg" alt="러닝크루" />
```

### 2. 폰트 최적화
- **Google Fonts**: `next/font/google` 사용으로 자동 최적화
- **폰트 프리로딩**: 중요한 폰트는 `preload` 옵션 사용
- **폰트 표시**: `display: swap`으로 텍스트 깜빡임 방지

```tsx
import { Geist } from 'next/font/google';

const geist = Geist({
  subsets: ['latin'],
  display: 'swap',
  preload: true,
});
```

### 3. 번들 최적화
- **동적 임포트**: 큰 컴포넌트는 필요시에만 로드
- **트리 쉐이킹**: 사용하지 않는 코드 제거
- **코드 스플리팅**: 페이지별 자동 코드 분할

```tsx
// 동적 임포트 예시
import dynamic from 'next/dynamic';

const TestimonialsSection = dynamic(() => import('./TestimonialsSection'), {
  loading: () => <div className="h-64 bg-gray-100 animate-pulse rounded-lg" />,
  ssr: false // 클라이언트에서만 필요한 컴포넌트
});
```

### 4. CSS 최적화
- **Tailwind CSS**: 사용된 클래스만 번들에 포함
- **Critical CSS**: 첫 화면에 필요한 스타일 우선 로드
- **CSS-in-JS 최소화**: 런타임 오버헤드 방지

### 5. SEO 최적화
- **메타데이터**: 각 페이지에 적절한 메타데이터 설정
- **구조화 데이터**: JSON-LD 스키마 마크업 추가
- **Open Graph**: 소셜 미디어 공유 최적화

```tsx
// layout.tsx에서 메타데이터 설정
export const metadata: Metadata = {
  title: '러닝크루 - 함께 달리는 즐거움',
  description: '러닝크루와 함께 건강한 라이프스타일을 시작하세요. 매주 정기 러닝 모임과 다양한 이벤트를 통해 새로운 친구들을 만나보세요.',
  keywords: ['러닝', '크루', '운동', '건강', '친목'],
  openGraph: {
    title: '러닝크루 - 함께 달리는 즐거움',
    description: '러닝크루와 함께 건강한 라이프스타일을 시작하세요.',
    images: ['/og-image.jpg'],
  },
};
```

## 성능 모니터링

### 1. Core Web Vitals
- **LCP (Largest Contentful Paint)**: < 2.5초
- **FID (First Input Delay)**: < 100ms
- **CLS (Cumulative Layout Shift)**: < 0.1

### 2. 성능 측정 도구
- **Lighthouse**: 개발 중 성능 점검
- **WebPageTest**: 실제 사용자 환경 시뮬레이션
- **Next.js Analytics**: Vercel 배포 시 자동 성능 모니터링

### 3. 최적화 체크리스트
- [ ] 이미지 최적화 완료
- [ ] 폰트 최적화 완료
- [ ] 번들 크기 최적화
- [ ] SEO 메타데이터 설정
- [ ] Core Web Vitals 목표 달성
- [ ] 모바일 성능 최적화
- [ ] 접근성 준수
description:
globs:
alwaysApply: false
---
